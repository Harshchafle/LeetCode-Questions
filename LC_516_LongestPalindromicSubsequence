class Solution {
    public int longestPalindromeSubseq(String s) {
        String rev = getRev(s);
        int n = s.length();
        // System.out.println(rev);

        int dp[][] = new int[n+1][n+1];
        for(int i = 1; i <= n; i++){
            for(int j = 1; j <= n; j++){
                if(s.charAt(i-1) == rev.charAt(j-1)){
                    dp[i][j] = 1 + dp[i-1][j-1];
                }
                else dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);
            }
        }
        // print(dp);
        return dp[n][n];
    }

    public String getRev(String s){
        StringBuilder str = new StringBuilder(s);
        return str.reverse().toString(); 
    }

    public void print(int[][] nums){
        for(int i = 0; i < nums.length; i++){
            System.out.println(Arrays.toString(nums[i]));
        }
    }

}
