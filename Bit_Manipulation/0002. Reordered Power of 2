You are given an integer n. We reorder the digits in any order (including the original order) such that the leading digit is not zero.

Return true if and only if we can do this so that the resulting number is a power of two.

Example 1:
Input: n = 1
Output: true

Example 2:
Input: n = 10
Output: false
 
Constraints:
1 <= n <= 109

Solution : 
class Solution {
    public boolean reorderedPowerOf2(int n) {
        String nStr = String.valueOf(n);
        int nFreq[] = getFreq(nStr);
        for(int i = 0; i <32; i++){
            int powOfTwo = 1 << i;
            String powStr = String.valueOf(powOfTwo);
            if(powStr.length() == nStr.length()){
                int[] powFreq = getFreq(powStr);
                if(Arrays.equals(powFreq, nFreq)) return true;
            }
            else if(powStr.length() > nStr.length()) break;

        }
        return false;
    }

    public int[] getFreq(String numStr){
        int freq[] = new int[10];
        for(char c : numStr.toCharArray()){
            freq[c-'0']++;
        }
        return freq;
    }
}
