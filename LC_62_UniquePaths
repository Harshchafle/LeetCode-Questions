class Solution {
    public int uniquePaths(int m, int n) {
        // memo
        // int dp[][] = new int[m][n];
        // for(int i = 0; i < m; i++){
        //     Arrays.fill(dp[i], -1);
        // }
        // return help(0, 0, m, n, dp);

        // tab
        int[][] dp = new int[m][n];
        Arrays.fill(dp[0], 1);
        for(int i = 0; i < m; i++){
            dp[i][0] = 1;
        }
        return tab( m, n, dp);
    }

    // memoization
    public int help(int i, int j, int m, int n, int[][] dp){
        if(i >= m || j >= n) return 0;
        if(i == m-1 && j == n-1) return 1;
        if(dp[i][j] != -1) return dp[i][j];
        int right = help(i, j+1, m, n, dp);
        int down = help(i+1, j, m, n, dp);
        return dp[i][j] = right + down;
    }

    // tabulation
    public int tab(int m, int n,int [][]dp){
        for(int i = 1; i < m; i++){
            for(int j = 1; j < n; j++){
                dp[i][j] += dp[i][j-1] + dp[i-1][j];
            }
        }
        return dp[m-1][n-1];
    }
}
