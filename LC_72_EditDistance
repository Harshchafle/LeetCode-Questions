class Solution {
    public int minDistance(String word1, String word2) {
        StringBuilder a = new StringBuilder(word1);
        StringBuilder b = new StringBuilder(word2);
        int n = word1.length();
        int m = word2.length();
        int dp[][] = new int[n][m];
        for(int i = 0; i < n; i++){
            Arrays.fill(dp[i], -1);
        }
        return helper(n-1, m-1, a, b, dp);
    }

    public int helper(int i, int j, StringBuilder a, StringBuilder b, int[][] dp){
        if(i == -1) return j+1;
        if(j == -1) return i+1;
        if(dp[i][j] != -1) return dp[i][j];
        if(a.charAt(i) == b.charAt(j)){
            return dp[i][j] = helper(i-1, j-1, a, b, dp);
        }
        else{
            int del = helper(i-1, j, a, b, dp);
            int ins = helper(i, j-1, a, b, dp);
            int rep = helper(i-1, j-1, a, b, dp);
            return dp[i][j] = 1+Math.min(del, Math.min(ins, rep));
        }   
    }
}
